package com.quantumCryptography.qTESLA.Poly;

import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.ByteBuffer;

import static com.quantumCryptography.qTESLA.Parameter.H;
import static com.quantumCryptography.qTESLA.Parameter.K;
import static com.quantumCryptography.qTESLA.Parameter.N;
import static com.quantumCryptography.qTESLA.Parameter.PK_BYTE;
import static com.quantumCryptography.qTESLA.Parameter.SEED_BYTE;
import static com.quantumCryptography.qTESLA.Parameter.SK_BYTE;
import static com.quantumCryptography.utility.Utility.getByteArrayFromResFile;
import static com.quantumCryptography.utility.Utility.getIntArrayFromResFile;
import static java.lang.System.arraycopy;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class PolyTest {

    private final int[] posList = {
            510, 652, 285, 404, 878, 935, 738, 582, 202, 123, 814, 55, 483, 372, 532,
            902, 878, 692, 673, 27, 1013, 923, 601, 356, 557
    };

    private final int[] signList = {1, 1, 0, 1, 1, 1, 1, 0, 0, -1, 1, -1, 0, -1, -1, 0, -1, 1, 1, 1, -1, -1, -1, 1, 1};

    private final int[] a = {
            0xC4847C67, 0xA1DE9FB7, 0xEEC77C2A, 0xDA2F3B66, 0x75B14C0B, 0x535F2957, 0x6C5A72A5, 0x56F0573D,
            0x5C91CAD4, 0x01CCB1E7, 0x61834BF4, 0xD8523001, 0x71EF698F, 0x8BFF262E, 0x8B463F96, 0xDE3FC1C8,
            0x52BB69E7, 0xA62B7228, 0x51CDE5F4, 0x17862FC3, 0xC8A0DAD1, 0xA93BEA12, 0x1872D185, 0xDAFBAF07,
            0x0E142242, 0xA239C17B, 0xA8CCD2C5, 0x93AB610A, 0x8E9BEF56, 0x89F6FA5D, 0xD8B65AFB, 0x6E1A3036,
            0x1F6959C8, 0x145E1FFA, 0x89B25367, 0xBF857F05, 0xE53672E1, 0x1CD90313, 0x55070ED3, 0x94A22D56,
            0x00D9F339, 0x30A4C18E, 0x4DBE1790, 0xFC88EC30, 0x0E337E04, 0x1001184C, 0x04F147AC, 0xCFEB4A81,
            0x58F6D16E, 0x7F7AEB48, 0x79F1F13D, 0x7980E4E2, 0x411A70CF, 0x953136CB, 0xBAD7FCBB, 0x922649CF,
            0xBE1DB528, 0xBC61A477, 0xAB997AEA, 0x7A30DA4F, 0x465330F0, 0x2296BDFB, 0x10886BCB, 0xF65012CC,
            0x813FD683, 0x11A6045F, 0x95CD71EB, 0x2FBED134, 0x52386D69, 0x3FE00ECD, 0xD86678BF, 0x30DBFA8A,
            0x3C00EF7B, 0x1CCE05F4, 0xDE4A9716, 0x507C3F06, 0x93E1441F, 0xAB06E97E, 0x757FE2D2, 0x8DBA73F7,
            0xDBBCC3C9, 0xE154B7DB, 0xF55DCB97, 0xDFECFB35, 0x520795FF, 0xBFD194F4, 0x2AE938B4, 0x39BEA4FE,
            0xF21FA2FE, 0xB24E7BC4, 0x84957EC3, 0x3EC22606, 0xADB42A63, 0x0E3421AA, 0x4290DD76, 0xAFFB0B1F,
            0x26738716, 0xA0C41ED0, 0xA6C43BA8, 0xEC27A9C2, 0x3069EDF3, 0x3842E5AE, 0xAB4EAF04, 0xA8C718B2,
            0x38CED20F, 0x465A86EC, 0xB9AA851C, 0x1CA054B2, 0x02581E06, 0x76272511, 0x4ACDF8D9, 0xD777FDA0,
            0x426D5AAA, 0xAC3A59E6, 0xBFB2C914, 0x6F64F079, 0x5863D8E4, 0xB0F8175B, 0x944BE4DA, 0x50748BFA,
            0x1C49FFF2, 0x64463CAD, 0xD217A983, 0xC903667B, 0x19A3E3CC, 0x24B6DEBA, 0x3758D648, 0x14E3B34B,
            0xBD03651D, 0x9AA8C341, 0x0A90DBD2, 0x0A4347FE, 0x8C5464CB, 0x41AB6B94, 0xB925388D, 0x5EE1095B,
            0x34AD40BF, 0x6D6660C5, 0x25BA57B7, 0x25242849, 0xA41E7831, 0xBF7E0566, 0x857A4C36, 0xD716CDE4,
            0x8352ED1B, 0x380B92A9, 0xAADF37F6, 0x734FE2A0, 0x13CBCEC2, 0xFE355CFD, 0xF4B18DD7, 0x61A3D944,
            0xE8CAD2F9, 0xE2A76F8A, 0x695F66B1, 0x886BB17E, 0xCE36D320, 0xF26E5927, 0x6A4D2669, 0x012D5DFD,
            0x934F1C4D, 0x3F812C42, 0x95E410A3, 0xB142D6AC, 0xF216651C, 0x5C1FFCA1, 0x10D80EF8, 0x16B63959,
            0x30C9112A, 0xEDF9D622, 0x05E70A39, 0x86860136, 0x419CE700, 0xC1EF9555, 0x5524F2B7, 0xF0FC5382,
            0xF0A7B95C, 0x7C6E7964, 0x574AAA8F, 0x0F5A5860, 0xF6DAC40C, 0xA156AB3A, 0x288BB136, 0x9A4EA1A0,
            0x9BE98B90, 0x105187AB, 0xD1813D4E, 0xE8626C78, 0x79B50CCE, 0x82012F03, 0xD9469500, 0x4A86EA69,
            0xF528E2F8, 0xEFEED41B, 0x92346053, 0x1608568C, 0x898466A8, 0xDFA8D22C, 0xE40A459E, 0xECD47D9D,
            0xFDED85AE, 0xF1AF76DD, 0x4E4BE2F3, 0xAA074124, 0xE59EBDFF, 0x3887C251, 0xE2D2ACEF, 0xC1AC8500,
            0x86A7EEAC, 0x84350CF3, 0xD820B60B, 0xF7AC4E31, 0x664E038D, 0x96984E97, 0x6D7F7945, 0x5B553D47,
            0x57B686C2, 0x75468D03, 0x2913CE62, 0x045FC01E, 0xA5384890, 0x0A20A8B2, 0xA996E696, 0x2EE0EC9E,
            0x27F5E166, 0x95F91AD8, 0x99C85027, 0xADCFC838, 0xAA44AEF7, 0x312C6C6B, 0x201B211D, 0x6F313873,
            0xFAC8B85A, 0x7510755B, 0x0546EC26, 0x961F79C5, 0x95767185, 0x83EC59DF, 0xE0FE9FFC, 0x29A3FE7B,
            0xB6B2E384, 0x987FFA01, 0xFC6A3C6E, 0x32E26B54, 0xA87EAF08, 0xADDBAAB4, 0x4C4B61A7, 0xAB88FA60,
            0x76AF2421, 0x5DB79E9F, 0xDD89360E, 0x1EDE344A, 0x37D9AD8D, 0x1D16FE41, 0xBB280773, 0x77F95F3F,
            0xDFB1C45D, 0x3C2CCAED, 0xBDC625A9, 0x1E82330F, 0x62D01C33, 0xFA889314, 0xCB64AFC2, 0xB2B810AD,
            0x5C443C44, 0xDBA29A9E, 0x4D25EB29, 0x21F6F998, 0x782F403B, 0x3B9C5478, 0x4A914FDD, 0x0A9C2821,
            0x0335F105, 0xF7DBDC31, 0x94F8756A, 0x7E13217F, 0x2906FD43, 0xE95B3541, 0x4D008F36, 0x0EACFC2E,
            0x35A64685, 0xE9A5C672, 0x35127E30, 0xC3BE8A97, 0x0E3461D0, 0x4CF3F020, 0xC6F43BEA, 0x1C562DD8,
            0x1BBEE79C, 0x848E7B46, 0xBDE9526E, 0xBE720EBF, 0x090343CD, 0xFEABA806, 0x7F5738D4, 0x3A2ADD65,
            0x8C4B634E, 0x9D24B66C, 0xDF8C9995, 0x9FC4EA52, 0xAB3D6779, 0x1285FCDB, 0xB2FFB71B, 0x0CB6BFCE,
            0xC42520C6, 0xBE9C33CB, 0xB3B084CA, 0x9C2F86ED, 0x155B1192, 0x6EE4B542, 0x1E2F0D22, 0x4B4DFEE4,
            0xFC85A195, 0x932F545A, 0xA09AE8BC, 0xF0EA04FE, 0x76F5FD6A, 0x74FE7311, 0x3A50E409, 0x518F4614,
            0x4E1BB981, 0x69C0F6C8, 0x7C3B0DC6, 0xB51BD1B4, 0x500AF818, 0x5AA7F7D5, 0x339300C2, 0xDADC69B1,
            0x51A2DD90, 0x4976D23E, 0xDD7B5760, 0x2A18A74D, 0x95564542, 0x65179D98, 0x87B78A08, 0x20E3E2FA,
            0x5A7F4DD4, 0x4AFAC3A2, 0x90148077, 0x292EC8C7, 0x7A6C433A, 0x626A8B91, 0xA429EA0D, 0x5002CA25,
            0xA9053CE4, 0x9F28265F, 0xA48F9BF7, 0xE28D3A2B, 0xE8F500E7, 0x3F375D19, 0x26CED77C, 0x731AA94C,
            0xE54243D0, 0x2D4B95AD, 0x75782330, 0x47F536D1, 0x6B1F02D0, 0x86B137DD, 0xD38D4D8D, 0x9BF2D79E,
            0x7340ECBA, 0x15E587C1, 0xD39EAA10, 0xCAF982A9, 0x27E08C9E, 0x641EAB94, 0xF6659875, 0x6A0A080F,
            0x2A8B6F30, 0x03B49D21, 0x762CCECB, 0x60275745, 0x7B5FED5F, 0xE0A09124, 0x99DB8E69, 0xEE6BC642,
            0x5D40D1AD, 0xD6E4439C, 0x81DD9455, 0x4A893DA7, 0x8832DF43, 0xA95017A1, 0x80ADC72D, 0x26D4D168,
            0xF50CFAD7, 0x715BA1D9, 0x6796EF3D, 0xE0EB9AB9, 0xC5C433B2, 0xD2DA3759, 0x3A7068AD, 0x5380F262,
            0xB3DC0618, 0x94646FC7, 0x65312C9A, 0x0888C0E9, 0x69385379, 0x334AFCE5, 0xA19B2C2D, 0x8D48D8E6,
            0x204EE3D7, 0x97B5B9BD, 0x93B13C27, 0xC7E0A16B, 0xE135A63F, 0xB165D05E, 0x7133FBF5, 0xD67BC162,
            0x70DFE502, 0x251FC669, 0xEE72341A, 0x379E1CD2, 0x4609096D, 0xA53833DC, 0xB8FA6470, 0xC9FFC1CD,
            0xDB81CB44, 0xFFB67985, 0x907DDDFB, 0xE3CEF41F, 0x0A6D085B, 0x3878498F, 0xE5FDBEA9, 0x7CF10317,
            0x62AEB79A, 0xB8F66D60, 0x81A856F6, 0x69A520DE, 0x06ABD631, 0x87EC7F82, 0x069F8E47, 0x7FA05CC7,
            0x5E5DB6F9, 0x75EFF183, 0x60840000, 0xD0C000E7, 0xBC173C95, 0x4C2DF511, 0x6157D474, 0x47BCD30B,
            0x5A66ADF1, 0x9C364BB2, 0x6AAB59CD, 0x13FB8B2A, 0xC91D2FF2, 0x108CE291, 0xA62565FC, 0x13834FD6,
            0xD5CD51F3, 0xD9D5CEF9, 0x939A4E7B, 0xA999039B, 0x1EFCEED5, 0x6D01B579, 0xDF18DB97, 0x195C26CC,
            0x33A7CD31, 0xB7107F7A, 0xFEEC994B, 0xBD084DB5, 0x5DDBF778, 0xA2486BE9, 0x686264E4, 0x93AC8158,
            0x850951E5, 0x78C7C095, 0xF959F936, 0xEAD0C8F3, 0xF7BD57BD, 0x9C7607DF, 0x7DAC0D6D, 0x9AE42D59,
            0x14F6CED2, 0x4B6E905D, 0x6B97FDAD, 0x79FE20EB, 0x204E1AD1, 0xF3C42685, 0x3D260681, 0xB5F3B2F3,
            0xE1CD64B0, 0xD39DA902, 0xDE1A2B0D, 0xC381FAAE, 0x91C8C581, 0x4D83F715, 0xCAD0FAA2, 0x2985E5EC,
            0x0021E987, 0x7B16D07B, 0x41300C41, 0x58D23B3A, 0x349C657C, 0x6C4C20F7, 0x04EA286C, 0x94317DBC,
            0xC79771F4, 0x56583DB2, 0x77B0373C, 0xC156814F, 0x326EED3F, 0x6C10F818, 0xFB909C1B, 0xC99685C5,
            0x7B15D1EF, 0xA7D78EAF, 0x9E470597, 0xB1F4E576, 0x65C3BAD2, 0x7C308376, 0xF65C28D7, 0x3FEA5D07,
            0xA4F85E2F, 0x5314EC99, 0xB691A861, 0x3F66B852, 0x902D7CB8, 0xA5E63D28, 0x8D59B598, 0x1AACD6B4,
            0x48D07EA6, 0x93CC4CAE, 0xD385B0A4, 0x9152CAC2, 0xFECB6B62, 0xDC8660A7, 0xE44D4D9F, 0xEED6B6E1,
            0xC7EEFD7F, 0xB412CB3D, 0xEE71E564, 0x392E9C9B, 0x3F518BA0, 0x5278CACE, 0x13284DEC, 0x043F074C,
            0x18A63485, 0xA50919BE, 0x6B859818, 0x1265D05D, 0xADF8BE6D, 0xFD796146, 0xB23A956E, 0xCA237135,
            0xB7620120, 0xC86B4CDA, 0x3DC8C1E3, 0x6CD315A3, 0xB5F3293D, 0x9312C177, 0x3ECC1F31, 0x76C5381B,
            0xA8787B84, 0xC62A4EBD, 0xF30DC7EC, 0x92D21B77, 0xC274BAE3, 0xA6352B4A, 0x03C9A563, 0x24A016F0,
            0x486E8903, 0xBBB852E3, 0x54D21179, 0x6E4E18B3, 0xFE08C172, 0x0E630064, 0x36B0785D, 0x001BB3E8,
            0x0174C8CE, 0x4D119664, 0x0D26E996, 0x988E75FD, 0xF4750B7D, 0x917BFC04, 0x7CB5E8FE, 0x82242542,
            0xF0BDD438, 0x310035CF, 0xCD8EA9F5, 0x57588648, 0x4EBF8C81, 0xE4DC6408, 0xAC68DF68, 0x592EF336,
            0x328B0382, 0x18AFA8E2, 0x2A0E2826, 0xB0727E68, 0xCEAB64BD, 0xD71CB954, 0xEF601515, 0xF94488CF,
            0xBF325CBC, 0x591B0E06, 0xD1B4EA47, 0x8C3E6172, 0xDF84DB2E, 0x5D53B9DD, 0x724E88D7, 0x5A55C553,
            0x9A3F0184, 0xA902BCDC, 0x7C54FAA1, 0x1AA57B19, 0xAA98AA40, 0x39610E61, 0xD1EDE9CA, 0x70B378D7,
            0x31FFDD33, 0xFB1FBA3A, 0xA6DA155A, 0x5AC34DA5, 0xACC74237, 0xA66549B4, 0x5E059AAB, 0xA8BB59DC,
            0x77C9D3CE, 0x7FD42987, 0xB803F49C, 0x5E6DDD65, 0xEC206F52, 0xE572055B, 0x2A4E5DFF, 0x93BD08BD,
            0x9772CA22, 0xC065739A, 0xB5BFA9F8, 0x4DF9FECF, 0x5FE3D824, 0xDE39B63E, 0xFC9B721F, 0xCEED5B26,
            0xFB8CDDC3, 0x93068224, 0xD141118A, 0x4EC5C792, 0xF12A5B32, 0x531B25F2, 0x9A22E8CA, 0xB6B78FDE,
            0xC4693760, 0x95740E61, 0xD3199551, 0x9D053B8E, 0xC082591D, 0x3F26C4A0, 0xAB7F6A7F, 0x7363A246,
            0x0F767425, 0xA3006A38, 0x5F672B4D, 0xC62B6615, 0x2C70A009, 0x1F101183, 0xBC9C9ACA, 0xADCFA23E,
            0xB92D4204, 0xFD2BBAC5, 0x8BA6A74E, 0x17CCB270, 0x16565D2C, 0xCA3CBE4F, 0x33CB0AFC, 0xC4C324E7,
            0x7B6CB9CC, 0x4C75506E, 0x16903AE4, 0x2542FEF1, 0x825522D7, 0x6FE399FD, 0x82173000, 0x1C6EFBC0,
            0x1274059D, 0x6FC4E332, 0x3D51799D, 0x99A8CB12, 0xA93C3175, 0xA6D2F6AC, 0x670CEC72, 0xE8A7F285,
            0xC7A1C7BB, 0x587B31B3, 0xCFCAD92D, 0xEE721B18, 0xD7430BC5, 0x36A0CDA5, 0x34B731FB, 0x0284F113,
            0x331FACAE, 0x827C5F47, 0xA6ABB584, 0x811CAA0B, 0x79FA4541, 0x7545CCB0, 0x56D9E173, 0xE6009445,
            0x70D35A0E, 0x64E7E63D, 0x3B9F0112, 0x944AD102, 0x9602A473, 0x6DA226F6, 0x45C003C1, 0xF4D3861E,
            0xFD26C6DE, 0x6773DE10, 0x20B5C318, 0x7D5678A0, 0x1F674BF5, 0x80ADD8B7, 0xB208F239, 0xF4297680,
            0x5D5DA024, 0x9EA7B0F3, 0x7A379379, 0x41437AEE, 0xD7716B1F, 0xA093E1F9, 0xC9353CF0, 0x89C36ED5,
            0x7DF20AA7, 0x88EC8F17, 0x2623C931, 0xFD3A5C24, 0x0F8E1C54, 0xEC28836F, 0x459DDD4D, 0x07378936,
            0x9FEECD4D, 0xAE3C05F5, 0xCB390D51, 0xB007E4B0, 0xF8068BB8, 0x9FE80CD6, 0xF1511693, 0x37966704,
            0x5FCF6C70, 0x9B6E1FB0, 0xD4EC9C81, 0x9B471FFD, 0xA0650E27, 0x6D2CEDFD, 0x5422B15D, 0x829481BE,
            0x08172D1A, 0x2AE73C14, 0xA866982B, 0x3A460E60, 0x649A7DC6, 0xAA917EF4, 0x8E10F461, 0x1F920E86,
            0x70AC8802, 0x3D60AE82, 0x44AA74A4, 0xFC3303E8, 0x3D1F8228, 0x42A6CC66, 0xD3946949, 0x6A20F356,
            0xCB1A2548, 0x927DBD1C, 0x0E0201B9, 0x614A869B, 0x06A939D6, 0x8F6B544E, 0xAD17C455, 0x4546D79C,
            0x7CC676D0, 0xA0B9FE89, 0xFC757522, 0x520E7656, 0x9C8A5BF0, 0x94E7BEF4, 0xF426EF01, 0xA67141CF,
            0x9EF50646, 0x067C5FB9, 0xF3152E34, 0x614BD7FB, 0x85A0EA62, 0xDE006E8B, 0xC470FA63, 0x3BBB094C,
            0xCBAF9B22, 0xC21DEE4D, 0xD22493C4, 0xCB379531, 0xB747B6B6, 0x7D242CD8, 0xAD3BCE56, 0x33AAF010,
            0xAA7E27DB, 0x1C926AF5, 0x11FEDE69, 0xD1208C3B, 0xC4FC7353, 0x97C10D81, 0xAD866714, 0x1D46F922,
            0x38F9761E, 0x276DB25F, 0x44807E98, 0x6E3F3C31, 0xD086666F, 0x55084BF5, 0x248261D3, 0xFE3CF515,
            0x21762D55, 0xC3619246, 0xF96D7E72, 0x34357F19, 0x0378901B, 0x4CB5A568, 0x472F24CA, 0x91ADB124,
            0x3A9B8084, 0x92897C91, 0x30932069, 0x0BD37988, 0x7E711637, 0x3980E6F5, 0xE1C15CEB, 0x910F6CAD,
            0x611063F0, 0x815C4F71, 0x245ED374, 0xCEF29146, 0x4B17CBFE, 0x57306052, 0x44DF1365, 0x6FD721E8,
            0x737A7291, 0xBDD43B5C, 0x7FEEBE0A, 0xC3B339A0, 0x66707B2C, 0x24807A16, 0x75140BFE, 0xA016C204,
            0x1A6C5773, 0xA82C5978, 0xBB6B5445, 0xE866B432, 0x3C19657F, 0x4FCCF838, 0x9AFDC237, 0xFEA99D61,
            0x3034B2AE, 0xCACD7F0F, 0x72574374, 0x4F7D85EB, 0xC3EE99B8, 0x57217A1B, 0x709E184A, 0x5B7C5C11,
            0xBA63DB2F, 0x61D281C2, 0x590FFDAD, 0xE142839B, 0x11BEEE6A, 0xF5496B55, 0xCAA21077, 0x5EFB828B,
            0x07975E5D, 0x3FE8AC3D, 0x09BCE8BA, 0xEA85835C, 0x37EDD9AC, 0x0D7340B4, 0x1A276C9B, 0x3A0A4BF4,
            0x73DA0930, 0x56C49767, 0x09CADBEC, 0x9FED38F4, 0x57AE953F, 0x5882AB43, 0xE8E8AF5F, 0x488381DA,
            0x7FD588EB, 0x53BC49D8, 0xE724DA55, 0x49F263D1, 0x9E843220, 0xC8994380, 0x5A59D117, 0xE76187B8,
            0x1F8F9C5A, 0x8CCDF8D2, 0xF39C6EA9, 0xCEE8479B, 0x349EEE0D, 0xB6CC0E6B, 0x77DE54CF, 0x62415636,
            0x5FD83999, 0xDF068C65, 0x3F020D32, 0x93DAE097, 0x54D60746, 0xA87A68BE, 0x5481FFF0, 0x7AC0F40B,
            0xFC51CC98, 0x4F3F6D76, 0xA9B3A8D7, 0x3AADB6E4, 0x66AAEF69, 0x318340AE, 0x1CBECB49, 0xAF5D99FF,
            0xC72C5D25, 0x502E0B80, 0x64CD08BF, 0xA1D6AF04, 0xDADFBC45, 0x18C9DE00, 0x31DE2E00, 0x941645A7,
            0x0A2B19B8, 0x48184999, 0x28B284A0, 0xA8DD9ED1, 0x0C0F8B3F, 0xE4011C6F, 0xF4445CD4, 0xE09F1EB0,
            0xBC574EE1, 0xAB5CC2C2, 0x96E0B7FE, 0x4D6BA987, 0x0DD38DDD, 0x43AF66F3, 0x8ED57D14, 0xFF279F41,
            0xD8B1B129, 0x7EBD9DE4, 0xB4E0A742, 0xA707050F, 0x31A170E9, 0xEB957A45, 0xEE647816, 0xDB86DBC6,
            0x23E031ED, 0xAFE0FB21, 0x89E7381B, 0xF83F9051, 0x7B1A108C, 0xD0660081, 0xDC15F87E, 0x941E6D32,
            0x2F582934, 0x10AD398C, 0xF0D7DF04, 0x9F836685, 0x48B642B8, 0x80DE768B, 0x588CF11B, 0xB84B745A,
            0x601D0A76, 0x17043355, 0x0E0A8C7C, 0x961423F7, 0x485B99EE, 0x38D61721, 0x4378C68B, 0x336190B3,
            0xA3AFF84F, 0xCF856C5E, 0xE2106FBC, 0xEE406230, 0x661FD801, 0x95046D3E, 0xE8D6D318, 0xEE2A9010,
            0x80D183E2, 0x7DE86576, 0x06F76A6D, 0x2722FE3B, 0xEF1D8186, 0x33F8633B, 0x279FC3DF, 0xFB54CD51,
            0x7D2C559D, 0xC2704393, 0x544FA1A4, 0x6BEF481C, 0x3AC5AB65, 0xD6BB1E11, 0x3D30D433, 0x998816AF,
            0xF2E1DCE9, 0x1F80A573, 0x8CDD42F7, 0x2B509010, 0xC6866D12, 0x0CFAE9E4, 0xC8036CBE, 0xEBF285D1,
            0xC9E026C9, 0x2F2224E4, 0xE6421071, 0x725C0136, 0xAB52C5CE, 0x3E17D55A, 0xBC2935CC, 0x90E8D894,
            0xF9E12EBF, 0xF767B193, 0xB8D02FAC, 0xCC723B0D, 0x9D8FCC8E, 0x99D028E0, 0x7DBD1B4D, 0x007EFE3A,
            0x6F7889E5, 0xE4159817, 0x4698BF26, 0xE3C7D673, 0x29D8EBF7, 0x3E4EEA6D, 0xC7E637BE, 0xA40E38BC
    };

    private final int[] omega = {
            0xA977A1A1, 0xDB22A9CC, 0x40F7693B, 0x64B44E5F, 0xA2FA43DE, 0xDE4FFA09, 0x8D58563D, 0x6515F080,
            0xF80EBF1D, 0x71770CFF, 0xD4BB1C46, 0x93EB3CCA, 0xD45CEF55, 0x8E3FE2ED, 0xB88C1B49, 0x6520056A,
            0x65F65122, 0x2D0537F6, 0xAF6CB246, 0xFAFA3663, 0xC76D457E, 0xBE5F35EC, 0xA8499164, 0x066BA10B,
            0x918C0240, 0x3191D1B5, 0x7A0DA905, 0x49842557, 0x1231BBC1, 0xC5043796, 0x30F09986, 0x0BD0F023,
            0xC27D817C, 0x9DD91DE7, 0xE6DD7A08, 0x6D29FA95, 0x9747EFA1, 0xABD72751, 0x32752772, 0x3F34C91D,
            0x7EF7F4A3, 0x56DC603C, 0xF42BC091, 0x151C27F0, 0x16BBD7F4, 0x4BB4624B, 0x755418E4, 0x28D68F43,
            0xFFF701E5, 0x6040FE76, 0x9B3C4C11, 0xF3A92281, 0x6D8F26BB, 0x7C4423A1, 0x31104AAF, 0x0470E46A,
            0x1D1EA4FA, 0xED428C2B, 0x3F519888, 0x1ED21087, 0xBE8184DF, 0x0FD5DDB3, 0x69E8FC42, 0x971DB4E0,
            0xA3751515, 0x33F5D47B, 0x566158D7, 0xB7B30523, 0xDA312C6C, 0xFA9A5728, 0x22423000, 0x924C99CF,
            0x41A3D752, 0x99FD0633, 0x551659BC, 0x0665D878, 0xB0866ACF, 0x1C3F8498, 0x6DDA73BA, 0xF5FAFBB2,
            0xB611EB38, 0x21F78621, 0x58B560FC, 0x1C125390, 0x3C0C241B, 0x7DA73CF1, 0x60038312, 0xCC1F9980,
            0xC1F84674, 0x948A2B4B, 0x49141302, 0xE2EABA36, 0xE9CBC9F2, 0xC0B4493A, 0xC418C392, 0x28E39BEE,
            0xD0F52452, 0xDF77A7F3, 0x60B5EDEF, 0xBDC84235, 0xF35D6E60, 0x8739F3C5, 0x1C18173D, 0x0C92376B,
            0xD8F1A69E, 0x16FD2D74, 0xFA9D13E7, 0x5953CE72, 0x6F851E69, 0x5DD1DFF7, 0x713F8E2A, 0x2D2080EC,
            0xCC329EBF, 0xB8CBCB73, 0x00A30D31, 0x630DA2B7, 0x748536D5, 0xCF24A463, 0x554E1F5C, 0x1F846123,
            0xEF1F87F5, 0xE697DBFD, 0x4B7DCC0A, 0x82E27CC1, 0x60D3648A, 0x8EA91566, 0x11CEEFCC, 0xB74EC786,
            0x28D33476, 0x305AB698, 0x58B1D235, 0xE6337C53, 0x4206AEFE, 0xF7C65760, 0x8B891DF8, 0x40E11007,
            0x5553EE2D, 0xC3BA9E04, 0xA2710764, 0x2EF1F101, 0x704FB1E4, 0x233CD1EA, 0x27E2B7CB, 0x0F242552,
            0x3FA2101E, 0x608D2A96, 0xE67DD036, 0xF2414B88, 0x098B3E32, 0x97CB9F96, 0xAB77C981, 0x434181DC,
            0xF4223E6C, 0xA7BA5D69, 0x97785BF8, 0x7800D115, 0x67110686, 0x88858AD0, 0x8A85EDE0, 0xAD829EE1,
            0xD6078CFF, 0x44C38211, 0x94B89B1D, 0x5F84F722, 0xAFC9D5B2, 0x7806704F, 0x7FCA8885, 0xA4B0E57E,
            0x8C32D2D6, 0x15FE9209, 0x67DF62F2, 0xE60A9A72, 0x465A9319, 0x4C083931, 0x0E1CCFA3, 0x0F128E30,
            0xB8EDCBE7, 0x96B326E4, 0xAF5D08AA, 0x9CC8C32D, 0xC1E96B33, 0x9335CD02, 0x815D8D47, 0x677725DA,
            0x23F6C5FD, 0x520D0FAF, 0xB8DCC82F, 0xECC194E0, 0x0F296B67, 0xA0CDAA07, 0xD133686D, 0x7043AE5F,
            0x1BFC3534, 0x04D1059F, 0x37A92AEA, 0xCBE36620, 0xFBB2F7E1, 0xB5399DC0, 0x5B3D7C44, 0x76F7CE5F,
            0xA218C57B, 0x385CAD9B, 0x9E538B0F, 0x91E87E7E, 0x8B1C7D9E, 0xEDF88B3E, 0x17A6FC33, 0xCF0D0ADD,
            0xAE09CD3E, 0x0482FFEA, 0x79D317FC, 0xBC0BDD78, 0xD3FE0FB4, 0x16FBB8F1, 0x58172A4B, 0xDED18534,
            0x791F7401, 0x44E4CE90, 0x586174C7, 0x9B492ED6, 0xB9215B27, 0xAB94FE45, 0x1585FAC6, 0xDBE0474F,
            0x0B57E6C9, 0x30DFF56B, 0xE627CCDA, 0xBCFEF24B, 0xA0D2504C, 0xEB61DA9E, 0xEC4671F6, 0x71850B3F,
            0xCE46AF06, 0xDF4E51C5, 0xF8B6DB81, 0x7C69620B, 0xEFCFD8E8, 0xC6175A52, 0xE81BB1E3, 0x06FFA7F9,
            0xD677DCF9, 0x1316B9F0, 0x90FEC9C4, 0x567C236E, 0x0C631257, 0x298D2F74, 0xF78B6414, 0xCFD78A53,
            0x43666F42, 0x37260B5F, 0x1A2FB5FA, 0x3C6DAE73, 0x731FB693, 0x23445529, 0x71125942, 0x540713FF,
            0x0DFA34A3, 0x2A81B33D, 0xC7E25599, 0x52C72B35, 0xE06BAFFB, 0x8827DD4C, 0xCACBA9A2, 0x7CAD3203,
            0x9D7835DF, 0xCA2469BF, 0x43DA3FDB, 0x0D2327D9, 0x098F2775, 0x2D3B2CB4, 0xF721A12C, 0x48F952D4,
            0x4F79DF88, 0x93107D72, 0x969574F4, 0x4A4FC6D4, 0x82611D9C, 0x7E416538, 0x38035989, 0xD40FC033,
            0x015039C8, 0x1B11367F, 0xFF4A165A, 0x4FE1BF4C, 0x7AEA2EB0, 0xC47A1D44, 0xE129D32E, 0xB278DFD9,
            0xABCB1F2C, 0xBDE46955, 0xA7C8A792, 0x70BC37A2, 0x4561CC7E, 0xD5573328, 0x111E770B, 0x01180121,
            0x415B2DAB, 0x8569E976, 0x8A79E495, 0x905D3144, 0xA5AF7170, 0x551F3E55, 0x29F552A7, 0xB0503C9C,
            0x986FA893, 0x82592FE5, 0xF643E791, 0x01697AA7, 0x3DD851C4, 0x6F5691A7, 0x89E11D56, 0xCAAA98FA,
            0xF4E9B9B7, 0x2A5020F1, 0x7F87C9FD, 0x51C39E46, 0x2176F0A4, 0x159F1788, 0x590507EF, 0xD1095203,
            0xC23740C3, 0x8688ED40, 0x58752E2D, 0xA18B203A, 0xFF8FDAAE, 0x9DADF9C2, 0x42C88C41, 0x025E4776,
            0x39674E7B, 0xAC575B48, 0xD2885EC0, 0x392D57AA, 0x4A2881FD, 0x36A3F0D7, 0xD0AF4274, 0x05F2E75A,
            0x9CBC29CC, 0x5000ADCE, 0xE6D9E160, 0x784D8DD9, 0xCDF7FFD0, 0x9B2E5D86, 0xE4F79E84, 0xEE2E35E1,
            0x19AAA26B, 0x259D0EDF, 0xED63A673, 0x540A8947, 0x932FAE0A, 0x77D1235D, 0xCA90A570, 0x1A790F73,
            0x4E082227, 0x271530AD, 0xA449C50F, 0xE9B40137, 0xD65AA4E3, 0xE9A6ABB9, 0x43F8971E, 0x618C95A2,
            0xAC8A0F06, 0x370B0C81, 0x6353B7AF, 0xF96AC680, 0x302421D7, 0xDB5A3323, 0x81859328, 0xDEFB823A,
            0x77F77700, 0xAC917138, 0x796E5959, 0x3A25B413, 0x11EFA8BE, 0xDA184BD8, 0x0A77DC53, 0x6220A82F,
            0x7238D2FE, 0x5C032D4B, 0x5874A696, 0xAAC8CE09, 0x032AFBC6, 0x4D6D40D0, 0xC6D522FD, 0x16946FA6,
            0x2ECFE3CB, 0x474EF8A2, 0x978B432B, 0x160E598C, 0xE59A3175, 0x7C4D752C, 0xB7BED3D0, 0xC3334B73,
            0x814AA7D0, 0x95D74AF6, 0x8F8BE03F, 0xAB1B060C, 0x0744F655, 0xA5A33FB5, 0x211CBF98, 0xD7DAA5C5,
            0x409445BA, 0x616E8276, 0x772299B1, 0xAB2B8CA1, 0x1313570C, 0xA586CD7E, 0x18B914CB, 0x0B2C353D,
            0x2CF53BF3, 0x5CFECD9A, 0xD96F4108, 0xEBB9637D, 0xBC144D0E, 0x86FD724A, 0x2E43782A, 0x42EA0039,
            0x3AE34576, 0x6C427546, 0xE1FD5B09, 0xD046B24D, 0xDE5A590D, 0x9760FC02, 0x2AF399E0, 0x486A5E61,
            0x6D4E50E6, 0xB405CC29, 0x4E201B97, 0x98D36CB8, 0x2E7EA642, 0xBA59CE0A, 0x96D4EAEC, 0xA94D7D0B,
            0xE327EC9A, 0x30CE4E7A, 0xA9CF3758, 0x76207059, 0x330678D1, 0x802AA40E, 0x0388CCB2, 0x65D9B88B,
            0x24DFBCF5, 0x136F5CEF, 0x5231AA2C, 0x1C6EA449, 0x2C801D0B, 0x54308186, 0x8B985880, 0xC1135178,
            0xA3489226, 0xB9D43BC8, 0x5212FA9E, 0x887FE9B6, 0x8ADB6D03, 0x4C49F1E9, 0x1C956905, 0x66FE4044,
            0xE8F204E9, 0x6980569B, 0x75978AB2, 0x97859B2A, 0x9769D322, 0x4EC8F1D2, 0x2E30113C, 0x8D7C9FFB,
            0x1250A5F9, 0x0A5FC285, 0x997F7056, 0xA74E9E0B, 0x356A8BA0, 0xBA3C7D63, 0x76E1E96E, 0x0BF2BBC1,
            0x9C5C8B49, 0xE2F8A639, 0xD32E7DA7, 0xCCF574B4, 0xE442BA46, 0x2D118FB9, 0x0648EE13, 0x1AA121D3,
            0xC4DCD5D7, 0x89D65477, 0xFE0A4342, 0xBB7805D4, 0xCE3E88D2, 0x7418724F, 0xA56EF30B, 0xC99CF90A,
            0xFC574F91, 0x48E44922, 0xDAAD854E, 0x6BE88B10, 0xBB10A660, 0xE21A4A23, 0x9D142897, 0x7D7FECC7,
            0xD990E5B4, 0xA87C5E33, 0x9E932C17, 0xB339FF91, 0x30A203E1, 0xD912B67D, 0xF342BF76, 0xE78E5B20,
            0x2C26DDE3, 0x110E8360, 0xCBF398E6, 0xE2B62A04, 0x28EC0A8D, 0xA7E15C4E, 0xE06CB6D7, 0x0B19C49B,
            0xE5B5FAB1, 0xCE3438BF, 0xDC4737C3, 0x0F9B328E, 0x07C4BCD8, 0xD2CFCAC4, 0x6F8847F3, 0x9D941F3E,
            0x5C625A87, 0xEDA2EC77, 0xDC12B18A, 0xDB9C928E, 0x825576B8, 0x2EC88B8D, 0x03B6E418, 0x7E9148B1,
            0xA2CF8B38, 0xE5D63909, 0x0329F165, 0xF2357DDA, 0x6E354537, 0x37EA0488, 0x2C86B5A3, 0x668C0D15,
            0x958C06F8, 0x1CA7C259, 0xA78B95E5, 0xFF3CB2FF, 0x05E2236D, 0x0FFEA6B9, 0x3D676B73, 0xB11E7062,
            0xB71FD4D8, 0x1B02F58C, 0x7199A0B1, 0xC9D96723, 0xDFBAB53B, 0x2E2CE9FC, 0x9C85306E, 0xA0940323,
            0x934ACC18, 0x7B858652, 0x5A5A197D, 0x2CA615B8, 0xCC203025, 0xF4984144, 0xD0C94A00, 0x5E720AD7,
            0x1A285382, 0xD6D56745, 0xAB7F6885, 0x56FC5816, 0x24F880EA, 0x863FCF75, 0x2C5E1666, 0x0A1799A2,
            0x06BAF593, 0x964802E4, 0x3F1B9D17, 0x232D5CD8, 0x4F95C36C, 0x0711C882, 0x832D992D, 0xA327FFB6,
            0x2F749368, 0xB0975B2C, 0x2BDCB87A, 0x08D6D3EC, 0xFC7E7613, 0x4355F72B, 0xB18BF402, 0x2E02D869,
            0x525DD32C, 0xAFADE95F, 0xDF027F57, 0xE24370A8, 0x232A2B80, 0x988AD010, 0xD77F1580, 0x868CD726,
            0x0FD861FA, 0xF7CBEAF9, 0x4C6891FC, 0x51F11D4E, 0x0C1DFEB0, 0x5CCE4B20, 0x087FE1AB, 0xB6B06A44,
            0x96021B8C, 0x66841DFC, 0x8B56C894, 0x3BBE4CE7, 0xEB1B10E7, 0x9AC83A31, 0xA226A032, 0x549011CE,
            0x2389ACAC, 0x70298161, 0x0BCD2DD8, 0x46A26A32, 0x9BBE6CCB, 0x6560FBCD, 0xCF360476, 0x36B2546D,
            0xB2904A0B, 0xE7590B58, 0xF2A83471, 0xB4B26E42, 0x2C1869FB, 0x737DC15A, 0x349C6209, 0xA83CCCEF,
            0x213D252B, 0x954F6180, 0x17D3D78B, 0x9F3409DF, 0x60FCC429, 0x12F04386, 0xFBE83103, 0x2C100FEC,
            0x8EF66A1C, 0xBEDD7A7F, 0x2534212F, 0xD09DA6B3, 0xEE0F66B7, 0x5D84A46D, 0xF87BB3EE, 0xADA92329,
            0xC5CD5927, 0x2A645824, 0x21DB0E3F, 0x8AF99C32, 0x7A2D775E, 0xFCCC9116, 0x9310C41E, 0x142A460F,
            0x9472C46F, 0x48EF4EDC, 0x75AE9F9F, 0x5A79DE3E, 0x39C5DCEE, 0xC59630AF, 0xDAA58862, 0xC34BD85B,
            0xDB3FBB8A, 0xD8B90C9D, 0x17511BD0, 0x56DABF88, 0xAA3DB971, 0x00A34425, 0x5E26C6BF, 0xDD57C8B4,
            0xFCC2587F, 0x9089C4DB, 0xBD7DAECA, 0x8CD9C3BD, 0x2556A7A8, 0x80CC684B, 0x5248710F, 0xB7C48E15,
            0x9408A3F8, 0x0BB0E602, 0x01D1E8DF, 0x5C342BC4, 0x50949B1B, 0x3FD4F87E, 0x37D58F1B, 0x78635B15,
            0x7E228BA1, 0x27904094, 0x85D40D24, 0x1617FCEC, 0xF496861E, 0x24F40649, 0xA105FD08, 0x8FE1590B,
            0x8D384B0A, 0x6EE13C7C, 0x6DE2B107, 0x6F50001E, 0xA268FCB2, 0xE89353FA, 0x26011CC9, 0xF9D2B1CB,
            0x36D2F8D1, 0xAEFF021B, 0x7C52F507, 0x9012FB6E, 0x2AB27EAD, 0xED906B84, 0xF5FC11C1, 0x372481E6,
            0xDD26DDE1, 0x1B7768F4, 0x19477224, 0x716B65FB, 0x9EC2067A, 0x8BB91916, 0xAC886301, 0xB0497E76,
            0x0A356E10, 0x200654B2, 0x102F85E4, 0x56D7E74F, 0x1EF25ECE, 0x25403BC2, 0x75F19D25, 0x68F2E394,
            0x2FB7A1BD, 0xFB7F92B4, 0x3C035223, 0xB180DD07, 0x466E0DF6, 0x2B4BD592, 0x2AE19F9B, 0xE57B3DA5,
            0xE4D032CF, 0xEDC4287E, 0x2D40C7F9, 0xFA43EA77, 0x9016A9EC, 0xF036085C, 0xC883B05D, 0xDEA67D5F,
            0x8F813579, 0x2634D199, 0x69B017EB, 0x35E04C86, 0x4A592173, 0xB7743EC1, 0x93C80474, 0xB437D81D,
            0x5FB08486, 0xF0A9FF37, 0x71CE8875, 0x11D51EDB, 0x05CF4CDF, 0x32765060, 0xF33FA9D9, 0x29F86B2C,
            0xC5C4247A, 0x5DBE095E, 0xDB06D3BE, 0xA6D4C1E3, 0xCE897451, 0xD057196C, 0x90BFC644, 0x4226E906,
            0x5075538E, 0x81B067A8, 0x2826C0B2, 0xE867A7E8, 0x4056D1F7, 0x6C904C2C, 0x6386E0F5, 0xC980BA3B,
            0xD1ABEC97, 0x4C2671FA, 0x174FD7AF, 0xE5D40875, 0x03F8FE7B, 0x05E836A8, 0xCC5DD7CD, 0x1FF5347A,
            0x0F4985DB, 0x19492A95, 0xBBA7BA34, 0xA1106849, 0xDA4992CC, 0xE021F5EA, 0x01FF0B74, 0xEEE0A59A,
            0xCAD99EDE, 0x3512283B, 0x83D2C95C, 0xAEFB6FB7, 0x52D1F71E, 0xFC51F2E9, 0x11B73E9F, 0x95ECB4C0,
            0x621934BC, 0x5B2F28D1, 0x5EDFF293, 0xA668A746, 0xE9877565, 0x1814F693, 0x468736B1, 0x67F8D906,
            0xC149367F, 0xEC1A6153, 0xFA08F0B4, 0xFE3DE9B9, 0x709260E7, 0xB052E09A, 0xB329A34A, 0x0E9904E0,
            0xDCECF433, 0xBC4EA8DF, 0x6B0C5FEA, 0xB0436DFD, 0x0E955A71, 0x0A357AA0, 0x4147B328, 0xCE3D2C45,
            0x55130576, 0xD9E364EE, 0x0E735113, 0x40F53294, 0x65CF6768, 0x3AE7AE49, 0xD4E52318, 0xF97BB8C6,
            0x01F44F02, 0x0E1A9CB5, 0xE18B5F45, 0x986240D7, 0x1262BE01, 0x370419E7, 0x2BC7EEEA, 0x6499D34B,
            0x0416DA6D, 0xED9A33DE, 0x131AD0DB, 0x592377FC, 0xDDC01A3E, 0xE4E764ED, 0xEE7A58BA, 0xA0EB8DF6,
            0x1821200D, 0x2E7F16EE, 0x1F83F39F, 0xEC94611D, 0xE36DC6F8, 0x24B540B8, 0x1C09B117, 0x9DCA2DC0,
            0xA1379BAB, 0x9A1D11BC, 0xCAB88784, 0x93FB7C4B, 0x776BD8C5, 0x7D338FE4, 0xA881C60A, 0x2712D252,
            0x06832DE0, 0x5DB27E6F, 0x6179760B, 0x58B0ED72, 0xF1740FE6, 0x63CAA576, 0xBF5B3B4D, 0x5C1C9413,
            0x106553AD, 0x3E65D40C, 0xB2E8ACAB, 0x6F9C7290, 0x5041EE90, 0xF1FCB67A, 0xCC2BB7AE, 0xCF854223,
            0x1897530E, 0x828F3859, 0x94B3DB26, 0x8C092B5B, 0x6989D6A5, 0xBA0F783D, 0xBC24AC60, 0x4F9AB9A3,
            0x39DD57C6, 0x07FFD465, 0xBF1D5E29, 0x28232415, 0xAE477B86, 0xF42ECB74, 0xF3BFE56C, 0x9108B33B,
            0x27BCECB8, 0x38A62D06, 0xFBF6CC86, 0x89F10B3E, 0x9118B6DC, 0xAEBFAD1E, 0xBB808C4F, 0x5C973DB6,
            0x2C5342A7, 0xEAA0E9D9, 0x587B58B6, 0x10202799, 0x9A8D97AC, 0xCED00028, 0x3F30A885, 0xE00CF025,
            0x2D164B77, 0x28D98346, 0xA448838B, 0x13DAA021, 0x02AC5856, 0xB2E5FDDF, 0x2B5BBD0C, 0xE64506F4,
            0x8ADCE9FD, 0x659E863F, 0x598E9591, 0xC5B1792C, 0x62E6EAAD, 0x2A25AD01, 0xF6771840, 0xA16F16AB,
            0xF1C6D6F5, 0x11776F86, 0x349D614E, 0x0557AAD1, 0x22BBC631, 0x002A1999, 0x585EF3FE, 0x6BA5CBE2,
            0x1BBD8CFD, 0xF7E17334, 0xE67CECFF, 0x13AD783B, 0x4A645869, 0x186778AA, 0xB7774EFF, 0x30A01BE5,
            0xC75D2276, 0x5526A59F, 0x75342DAA, 0xA3FCF479, 0x3527F8B1, 0x3877BBB2, 0x2103D089, 0x3612F47C,
            0xEA8FCB5A, 0x9A6F9C25, 0x9AB78C0E, 0x60E0B07A, 0x83E384EF, 0x62AB6782, 0x49A39DD7, 0xC827EE67,
            0x840CCA8E, 0x7CBDAD71, 0x42FF80FD, 0xC77EB332, 0x96B8BDB5, 0x34DBD064, 0x42C32FAA, 0xA7F0C0F2,
            0x69E242AB, 0x9E7EC173, 0xE4C9CF99, 0x79C8CA77, 0x2495E727, 0xF0A10C6D, 0xABA48D0E, 0x27F9F486,
            0xF7F54DA8, 0xA38D776F, 0x514E54CB, 0xEE241CA3, 0xDDC07D76, 0xC5D52AEA, 0x4E676B36, 0x12E6EA11,
            0x1F811E16, 0xABD6F15A, 0x3BFDB560, 0x1D5A10DC, 0x20B52BCE, 0xE0FDEE69, 0xA9C792CA, 0x29FBC1CB,
            0xA2DB8F0C, 0xDE32CA3C, 0xE4551086, 0xEB6D9230, 0x1C65E30D, 0xAA9BB867, 0x95F4B185, 0x0F758503,
            0x592FAF46, 0x9C487D9F, 0xFB57F0F2, 0x609AC28A, 0xE5DAB5F4, 0x36CD62CF, 0x59006CDA, 0xBA317CF7,
            0xC886EDE0, 0x41F2AFAE, 0x3A7F58E7, 0x8DA4D54F, 0xB474982C, 0xE2BD9946, 0x11298D3B, 0x48D86B36,
            0xDA1A1025, 0xFC0AA1CF, 0xD4967184, 0x2D35DBE2, 0xA40217CF, 0xE69A3470, 0x7DB053F5, 0x484F1AF9,
            0x56826F57, 0x78C0F03A, 0x13BF866E, 0x94B456D3, 0xA77D9732, 0x1F870F6C, 0x282C4175, 0xBFE82E44
    };

    private final Poly poly = new PiPoly();

    @Test
    public void uniformPolynomialTest() throws IOException {

        byte[] partSeed = getByteArrayFromResFile("FIPS202/seed.txt", SEED_BYTE);
        ByteBuffer seed = ByteBuffer.allocate(SEED_BYTE * 3);
        int[] expA = getIntArrayFromResFile("qTESLA/Poly/aUniform.txt", N * K);

        arraycopy(partSeed, 0, seed.array(), SEED_BYTE, SEED_BYTE);
        int[] aOut = this.poly.uniformPoly(seed, SEED_BYTE);

        assertArrayEquals(expA, aOut);

    }

    @Test
    public void montgomeryReduceTest() {
        assertEquals(0xB2F1CBAA, this.poly.montgomeryReduce(0xABCDEF0123456789L));
    }

    @Test
    public void barretoReduceTest() {
        assertEquals(0xAAB655933624E37CL, this.poly.barretoReduce(0xABCDEF0123456789L));
    }

    @Test
    public void inverseNumberTheoreticTransformTest() throws IOException {

        int[] origA = new int[N * 3];
        int[] expA = getIntArrayFromResFile("qTESLA/Poly/aInvNTT.txt", N);

        arraycopy(this.a, 0, origA, N, N);
        this.poly.invNTT(origA, N, this.omega);

        for (int aIndex = 0; aIndex < N; aIndex++) {
            assertEquals(expA[aIndex], origA[N + aIndex]);
        }

    }

    @Test
    public void pointwiseMultiplyTest() throws IOException {

        int[] prod = new int[N * 4];
        int[] multiplicand = new int[N * 4];
        int[] multiplier = new int[N * 4];
        int[] expProd = getIntArrayFromResFile("qTESLA/Poly/prodPointwiseMul.txt", N);

        arraycopy(this.a, 0, multiplicand, N, N);
        arraycopy(this.omega, 0, multiplier, N * 2, N);
        this.poly.pointwiseMultiply(prod, N * 3, multiplicand, N, multiplier, N * 2);

        for (int prodIndex = 0; prodIndex < N; prodIndex++) {
            assertEquals(expProd[prodIndex], prod[N * 3 + prodIndex]);
        }

    }

    @Test
    public void polynomialNumberTheoreticTransformTest() throws IOException {
        int[] aNTT = this.poly.polyFwdNTT(this.a);
        int[] expANTT = getIntArrayFromResFile("qTESLA/Poly/aPolyNTT.txt", N);
        assertArrayEquals(expANTT, aNTT);
    }

    @Test
    public void multiplyTest() throws IOException {

        int[] prod = new int[N * 4];
        int[] multiplicand = new int[N * 4];
        int[] multiplier = new int[N * 4];
        int[] expProd = getIntArrayFromResFile("qTESLA/Poly/prodMul.txt", N);

        arraycopy(this.a, 0, multiplicand, N, N);
        arraycopy(this.omega, 0, multiplier, N * 2, N);
        this.poly.multiply(prod, N * 3, multiplicand, N, multiplier, N * 2);

        for (int prodIndex = 0; prodIndex < N; prodIndex++) {
            assertEquals(expProd[prodIndex], prod[N * 3 + prodIndex]);
        }

    }

    @Test
    public void addTest() throws IOException {
        int[] sum = this.poly.add(this.a, this.omega);
        int[] expSum = getIntArrayFromResFile("qTESLA/Poly/sumAdd.txt", N);
        assertArrayEquals(expSum, sum);
    }

    @Test
    public void addWithCorrectionTest() throws IOException {

        int[] sum = new int[N * 4];
        int[] augend = new int[N * 4];
        int[] addend = new int[N * 4];
        int[] expSum = getIntArrayFromResFile("qTESLA/Poly/sumAddWithCX.txt", N);

        arraycopy(this.a, 0, augend, N, N);
        arraycopy(this.omega, 0, addend, N * 2, N);
        this.poly.addWithCX(sum, N * 3, augend, N, addend, N * 2);

        for (int sumIndex = 0; sumIndex < N; sumIndex++) {
            assertEquals(expSum[sumIndex], sum[N * 3 + sumIndex]);
        }

    }

    @Test
    public void subtractTest() throws IOException {

        int[] diff = new int[N * 4];
        int[] minuend = new int[N * 4];
        int[] subtrahend = new int[N * 4];
        int[] expDiff = getIntArrayFromResFile("qTESLA/Poly/diffSub.txt", N);

        arraycopy(this.a, 0, minuend, N, N);
        arraycopy(this.omega, 0, subtrahend, N * 2, N);
        this.poly.subtract(diff, N * 3, minuend, N, subtrahend, N * 2);

        for (int diffIndex = 0; diffIndex < N; diffIndex++) {
            assertEquals(expDiff[diffIndex], diff[N * 3 + diffIndex]);
        }

    }

    @Test
    public void subtractWithReductionTest() throws IOException {

        int[] diff = new int[N * 4];
        int[] minuend = new int[N * 4];
        int[] subtrahend = new int[N * 4];
        int[] expDiff = getIntArrayFromResFile("qTESLA/Poly/diffSubWithRed.txt", N);

        arraycopy(this.a, 0, minuend, N, N);
        arraycopy(this.omega, 0, subtrahend, N * 2, N);
        this.poly.subWithRed(diff, N * 3, minuend, N, subtrahend, N * 2);

        for (int diffIndex = 0; diffIndex < N; diffIndex++) {
            assertEquals(expDiff[diffIndex], diff[N * 3 + diffIndex]);
        }

    }

    @Test
    public void sparseMultiplyWithSecretKeyTest() throws IOException {

        ByteBuffer sk = ByteBuffer.allocate(6530);
        byte[] partSK = getByteArrayFromResFile("qTESLA/QTESLA/QTESLA1/sk1.txt", SK_BYTE);
        int[] prod = new int[N * 3];
        int[] expProd = getIntArrayFromResFile("qTESLA/Poly/prodSparseMulWithSK.txt", N);

        arraycopy(partSK, 0, sk.array(), 653, partSK.length);
        this.poly.sparseMulWithSK(prod, N, sk, 653, this.posList, this.signList);

        for (int prodIndex = 0; prodIndex < N; prodIndex++) {
            assertEquals(expProd[prodIndex], prod[N + prodIndex]);
        }

    }

    @Test
    public void sparseMultiplyWithPublicKeyTest() throws IOException {

        int[] pk = new int[6200];
        int[] partPK = getIntArrayFromResFile(
                "qTESLA/QTESLA/QTESLA1/pk1Int.txt", PK_BYTE / Integer.BYTES
        );
        int[] prod = new int[N * 3];
        int[] expProd = getIntArrayFromResFile("qTESLA/Poly/prodSparseMulWithPK.txt", N);

        arraycopy(partPK, 0, pk, 1240, partPK.length);
        this.poly.sparseMulWithPK(prod, N, pk, 1240, this.posList, this.signList);

        for (int prodIndex = 0; prodIndex < N; prodIndex++) {
            assertEquals(expProd[prodIndex], prod[N + prodIndex]);
        }

    }

    @Test
    public void encodeCTest() throws IOException {

        int[] posList = new int[H];
        int[] signList = new int[H];
        byte[] cIn = getByteArrayFromResFile("FIPS202/seed.txt", SEED_BYTE);
        int[] expPosList = {
                641, 244, 220, 491, 224, 874, 458, 924, 455, 555, 689, 317, 275, 66, 238,
                774, 365, 966, 898, 822, 397, 68, 938, 604, 76
        };
        int[] expSignList = {
                1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1
        };

        this.poly.encodeC(posList, signList, ByteBuffer.wrap(cIn));

        assertArrayEquals(expPosList, posList);
        assertArrayEquals(expSignList, signList);

    }

}